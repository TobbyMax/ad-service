// Code generated by mockery v2.20.0. DO NOT EDIT.

package mocks

import (
	ads "homework10/internal/ads"
	app "homework10/internal/app"

	context "context"

	mock "github.com/stretchr/testify/mock"

	user "homework10/internal/user"
)

// App is an autogenerated mock type for the App type
type App struct {
	mock.Mock
}

// ChangeAdStatus provides a mock function with given fields: ctx, id, uid, published
func (_m *App) ChangeAdStatus(ctx context.Context, id int64, uid int64, published bool) (*ads.Ad, error) {
	ret := _m.Called(ctx, id, uid, published)

	var r0 *ads.Ad
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int64, int64, bool) (*ads.Ad, error)); ok {
		return rf(ctx, id, uid, published)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int64, int64, bool) *ads.Ad); ok {
		r0 = rf(ctx, id, uid, published)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ads.Ad)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int64, int64, bool) error); ok {
		r1 = rf(ctx, id, uid, published)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateAd provides a mock function with given fields: ctx, title, text, uid
func (_m *App) CreateAd(ctx context.Context, title string, text string, uid int64) (*ads.Ad, error) {
	ret := _m.Called(ctx, title, text, uid)

	var r0 *ads.Ad
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, int64) (*ads.Ad, error)); ok {
		return rf(ctx, title, text, uid)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, int64) *ads.Ad); ok {
		r0 = rf(ctx, title, text, uid)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ads.Ad)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, int64) error); ok {
		r1 = rf(ctx, title, text, uid)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateUser provides a mock function with given fields: ctx, nickname, email
func (_m *App) CreateUser(ctx context.Context, nickname string, email string) (*user.User, error) {
	ret := _m.Called(ctx, nickname, email)

	var r0 *user.User
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) (*user.User, error)); ok {
		return rf(ctx, nickname, email)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string) *user.User); ok {
		r0 = rf(ctx, nickname, email)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*user.User)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, nickname, email)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteAd provides a mock function with given fields: ctx, id, uid
func (_m *App) DeleteAd(ctx context.Context, id int64, uid int64) error {
	ret := _m.Called(ctx, id, uid)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int64, int64) error); ok {
		r0 = rf(ctx, id, uid)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteUser provides a mock function with given fields: ctx, id
func (_m *App) DeleteUser(ctx context.Context, id int64) error {
	ret := _m.Called(ctx, id)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int64) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetAd provides a mock function with given fields: ctx, id
func (_m *App) GetAd(ctx context.Context, id int64) (*ads.Ad, error) {
	ret := _m.Called(ctx, id)

	var r0 *ads.Ad
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int64) (*ads.Ad, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int64) *ads.Ad); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ads.Ad)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int64) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUser provides a mock function with given fields: ctx, id
func (_m *App) GetUser(ctx context.Context, id int64) (*user.User, error) {
	ret := _m.Called(ctx, id)

	var r0 *user.User
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int64) (*user.User, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int64) *user.User); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*user.User)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int64) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListAds provides a mock function with given fields: ctx, params
func (_m *App) ListAds(ctx context.Context, params app.ListAdsParams) (*ads.AdList, error) {
	ret := _m.Called(ctx, params)

	var r0 *ads.AdList
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, app.ListAdsParams) (*ads.AdList, error)); ok {
		return rf(ctx, params)
	}
	if rf, ok := ret.Get(0).(func(context.Context, app.ListAdsParams) *ads.AdList); ok {
		r0 = rf(ctx, params)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ads.AdList)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, app.ListAdsParams) error); ok {
		r1 = rf(ctx, params)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateAd provides a mock function with given fields: ctx, id, uid, title, text
func (_m *App) UpdateAd(ctx context.Context, id int64, uid int64, title string, text string) (*ads.Ad, error) {
	ret := _m.Called(ctx, id, uid, title, text)

	var r0 *ads.Ad
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int64, int64, string, string) (*ads.Ad, error)); ok {
		return rf(ctx, id, uid, title, text)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int64, int64, string, string) *ads.Ad); ok {
		r0 = rf(ctx, id, uid, title, text)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ads.Ad)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int64, int64, string, string) error); ok {
		r1 = rf(ctx, id, uid, title, text)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateUser provides a mock function with given fields: ctx, id, nickname, email
func (_m *App) UpdateUser(ctx context.Context, id int64, nickname string, email string) (*user.User, error) {
	ret := _m.Called(ctx, id, nickname, email)

	var r0 *user.User
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int64, string, string) (*user.User, error)); ok {
		return rf(ctx, id, nickname, email)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int64, string, string) *user.User); ok {
		r0 = rf(ctx, id, nickname, email)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*user.User)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int64, string, string) error); ok {
		r1 = rf(ctx, id, nickname, email)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewApp interface {
	mock.TestingT
	Cleanup(func())
}

// NewApp creates a new instance of App. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewApp(t mockConstructorTestingTNewApp) *App {
	mock := &App{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
