// Code generated by mockery v2.20.0. DO NOT EDIT.

package mocks

import (
	ads "homework10/internal/ads"
	app "homework10/internal/app"

	context "context"

	mock "github.com/stretchr/testify/mock"

	time "time"

	user "homework10/internal/user"
)

// Repository is an autogenerated mock type for the Repository type
type Repository struct {
	mock.Mock
}

// AddAd provides a mock function with given fields: ctx, ad
func (_m *Repository) AddAd(ctx context.Context, ad ads.Ad) (int64, error) {
	ret := _m.Called(ctx, ad)

	var r0 int64
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, ads.Ad) (int64, error)); ok {
		return rf(ctx, ad)
	}
	if rf, ok := ret.Get(0).(func(context.Context, ads.Ad) int64); ok {
		r0 = rf(ctx, ad)
	} else {
		r0 = ret.Get(0).(int64)
	}

	if rf, ok := ret.Get(1).(func(context.Context, ads.Ad) error); ok {
		r1 = rf(ctx, ad)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AddUser provides a mock function with given fields: ctx, u
func (_m *Repository) AddUser(ctx context.Context, u user.User) (int64, error) {
	ret := _m.Called(ctx, u)

	var r0 int64
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, user.User) (int64, error)); ok {
		return rf(ctx, u)
	}
	if rf, ok := ret.Get(0).(func(context.Context, user.User) int64); ok {
		r0 = rf(ctx, u)
	} else {
		r0 = ret.Get(0).(int64)
	}

	if rf, ok := ret.Get(1).(func(context.Context, user.User) error); ok {
		r1 = rf(ctx, u)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteAdByID provides a mock function with given fields: ctx, id
func (_m *Repository) DeleteAdByID(ctx context.Context, id int64) error {
	ret := _m.Called(ctx, id)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int64) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteUserByID provides a mock function with given fields: ctx, id
func (_m *Repository) DeleteUserByID(ctx context.Context, id int64) error {
	ret := _m.Called(ctx, id)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int64) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetAdByID provides a mock function with given fields: ctx, id
func (_m *Repository) GetAdByID(ctx context.Context, id int64) (*ads.Ad, error) {
	ret := _m.Called(ctx, id)

	var r0 *ads.Ad
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int64) (*ads.Ad, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int64) *ads.Ad); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ads.Ad)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int64) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAdList provides a mock function with given fields: ctx, params
func (_m *Repository) GetAdList(ctx context.Context, params app.ListAdsParams) (*ads.AdList, error) {
	ret := _m.Called(ctx, params)

	var r0 *ads.AdList
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, app.ListAdsParams) (*ads.AdList, error)); ok {
		return rf(ctx, params)
	}
	if rf, ok := ret.Get(0).(func(context.Context, app.ListAdsParams) *ads.AdList); ok {
		r0 = rf(ctx, params)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ads.AdList)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, app.ListAdsParams) error); ok {
		r1 = rf(ctx, params)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUserByID provides a mock function with given fields: ctx, id
func (_m *Repository) GetUserByID(ctx context.Context, id int64) (*user.User, error) {
	ret := _m.Called(ctx, id)

	var r0 *user.User
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int64) (*user.User, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int64) *user.User); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*user.User)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int64) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateAdContent provides a mock function with given fields: ctx, id, title, text, date
func (_m *Repository) UpdateAdContent(ctx context.Context, id int64, title string, text string, date time.Time) error {
	ret := _m.Called(ctx, id, title, text, date)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int64, string, string, time.Time) error); ok {
		r0 = rf(ctx, id, title, text, date)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateAdStatus provides a mock function with given fields: ctx, id, published, date
func (_m *Repository) UpdateAdStatus(ctx context.Context, id int64, published bool, date time.Time) error {
	ret := _m.Called(ctx, id, published, date)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int64, bool, time.Time) error); ok {
		r0 = rf(ctx, id, published, date)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateUser provides a mock function with given fields: ctx, id, nickname, email
func (_m *Repository) UpdateUser(ctx context.Context, id int64, nickname string, email string) error {
	ret := _m.Called(ctx, id, nickname, email)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int64, string, string) error); ok {
		r0 = rf(ctx, id, nickname, email)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewRepository interface {
	mock.TestingT
	Cleanup(func())
}

// NewRepository creates a new instance of Repository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewRepository(t mockConstructorTestingTNewRepository) *Repository {
	mock := &Repository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
